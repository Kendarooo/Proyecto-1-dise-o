def convertir_binario_a_octal(binario): #Función encargada de convertir el número en Octal y decimal
    decimal = int(binario, 2)
    octal = oct(decimal)
    return str(octal)[2:]

def convertir_binario_a_decimal(binario):
    return int(binario, 2)

def imprimir_tabla(binario):#Imprime el octal y decimal en la tabla
    octal = convertir_binario_a_octal(binario)
    decimal = convertir_binario_a_decimal(binario)

    print(f'{"Binario":>10} | {"Octal":>10} | {"Decimal":>10}')
    print(f'{binario:>10} | {octal:>10} | {decimal:>10}')

while True:
    hex_input = input('Ingrese un número binario de 11 bits en un formato de 3 digitos hexadecimales: ').strip().upper()

    try:
        binario = bin(int(hex_input, 16))[2:].zfill(11)
    except ValueError:
        print('Error: el número ingresado no es hexadecimal.')
        continue

    imprimir_tabla(binario)
    break
binary_data = binario
import matplotlib.pyplot as plt

def nrzi_encoding(data):
    signal = [0]    # La señal comienza en nivel bajo
    current_level = 0
    for bit in data:
        if bit == '1':
            current_level = 1 - current_level    # Cambio de nivel si el bit es 1
        signal.append(current_level)
    return signal
signal = nrzi_encoding(binary_data)
plt.plot(signal)
plt.title('Señal codificada en NRZI')
plt.xlabel('Tiempo')
plt.ylabel('Nivel')
plt.show()
# Pedir al usuario que seleccione el tipo de paridad
paridad_par = input("¿Desea usar paridad par para la codificación de Hamming? (Sí/No): ")
if paridad_par.lower() == "sí":
    paridad_par = True
else:
    paridad_par = False

# Pedir al usuario la hilera a codificar
hilera = binario

# Añadir los bits de datos a una lista
datos = [int(bit) for bit in hilera]

# Calcular la cantidad de bits de paridad necesarios
n_parity_bits = 4

# Inicializar los bits de paridad con valor 0
parity_bits = [0] * n_parity_bits

# Calcular los bits de paridad
for i in range(n_parity_bits):
    # Calcular la posición del bit de paridad
    pos = 2**i - 1
    
    # Calcular el valor del bit de paridad
    if paridad_par:
        parity_bits[i] = sum([datos[j] for j in range(pos, len(datos), 2)]) % 2
    else:
        parity_bits[i] = (sum([datos[j] for j in range(pos, len(datos), 2)]) + 1) % 2
    
    # Insertar el bit de paridad en la lista de datos
    datos.insert(pos, parity_bits[i])

# Imprimir la hilera codificada
print("La hilera codificada es: ", ''.join(str(bit) for bit in datos))
